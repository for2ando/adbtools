#!/bin/bash
pname=$(basename "$0")
usage="$pname apk PKGNAME [...]
$pname ab PKGNAME [...]
$pname data PKGNAME [...]

OPTIONS
  $pname apk PKGNAME [...]
    Install Android app's APK files for PKGNAMEs to a remote Android device.
  $pname {ab|data} PKGNAME [...]
    Put(install) Android app's data images for PKGNAMEs to a remote Android
    device.
    Each of data files is one get by the 'adb backup' command.
"

dotfile=~/.android-apps

## workaround for debug adb-sendkey
which adb-sendkey >/dev/null 2>&1 || adb-sendkey() { ./adb-sendkey "$@"; }

adb_shell() {
  adb shell "$@" | sed -b 's/\r$//;s/\r$//'
}

## put apps' apk using adb install or pm install
put_apks() {
  test $# -eq 0 && { echo "$pname apk: .apk file(s) required.">&2; return; }
  
  #adb install-multiple "$@"
  
  unset opts
  while true; do
    case "$1" in
    -*) opts="$opts $1"; shift;;
    *) break;;
    esac
  done
  
  for apk; do
    echo -n "$apk: ">&2
    adb install$opts "$(cygpath -w $apk)"
  done
}

## put apps' data using adb restore
put_data() {
  test $# -eq 0 && { echo "$pname data: .ab file(s) required.">&2; return; }
  source "$dotfile"
  unset opts
  while true; do
    case "$1" in
    -*) opts="$opts $1"; shift;;
    *) break;;
    esac
  done
  
  for ab; do
    echo -n "$ab: ">&2
    adb restore$opts "$(cygpath -w $ab)" >/dev/null &
    sleep 1
    adb-sendkey -v "$android_backup_password<tab><tab><enter>"
    wait
    echo >&2
  done
}


case "$1" in
-*) echo "$pname: $1: unknown option.">&2; shift; exit 1;;
esac

test $# -eq 0 && { echo "$usage"; exit 0; }

cmd="$1"
shift
case "$cmd" in
apk) put_apks "$@";;
ab|data) put_data "$@";;
*) echo "$pname: $cmd: unknown command.">&2; exit 2;;
esac
exit $?
